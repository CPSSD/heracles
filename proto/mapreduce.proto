syntax = "proto3";

package mapreduce;

import "datatypes.proto";

// API v2

// JobScheduleService adheres to API v2
service JobScheduleService {
    // Schedule a job on the cluster.
    rpc Schedule (ScheduleRequest) returns (ScheduleResponse);
    // Cancel a job. If everything is ok, empty message is returned, otherwise a gRPC error.
    rpc Cancel (CancelRequest) returns (EmptyMessage);
    // Describe some resource.
    rpc Describe (DescribeRequest) returns (Description);
}

message ScheduleRequest {
  // TODO: Add authentication token
  // Only essential data is filled in by the client
  datatypes.Job job = 1;
}

message ScheduleResponse {
  // TODO: Consider replacing this with full datatypes.Job if more information
  //       from the Job is needed.
  string job_id = 1;
}

message CancelRequest {
  string job_id = 1;
}

// Different types of resources available to get description of.
enum ResourceType {
  CLUSTER = 0;
  QUEUE = 1;
  JOB = 2;
  TASK = 3;
  // TODO: Enable worker information once some status about the worker is reported.
  // WORKER = 4;
}

message DescribeRequest {
  // Type of resource to describe.
  ResourceType resource = 1;
  // If the JOB resource is used, and job_id is empty, the request will fail.
  string job_id = 2;
  // If the TASK resource is used, and task_id is empty, the request will fail.
  string task_id = 3;
}

// Description contains the individial descriptions for the given request. Some
// fields might be empty depending on the ResourceType requested
message Description {
  // Cluster information
  Cluster cluster = 1;
  // Jobs are returned for both JOB and QUEUE, where if the QUEUE resource is requested,
  // only queued jobs will be returned.
  repeated datatypes.Job jobs = 2;
  // List of requested tasks.
  repeated datatypes.Task tasks = 3;

  // General information about the cluster
  message Cluster {
    uint32 queue_size = 1;
    uint32 available_workers = 2;
    uint32 total_workers = 3;
  }
}


// API v1

// Map reduce service is responsible for scheduling jobs on the cluster
// and getting information about the running jobs.
service MapReduceService {
    // Schedules a map reduce. Returns various gRPC error codes if the
    // operation failed before even starting.
    // TODO(voy): Decide do we want to return more information about scheduled
    //            request.
    rpc PerformMapReduce (MapReduceRequest) returns (MapReduceResponse);

    // Gets the status of the map reduce.
    rpc MapReduceStatus (MapReduceStatusRequest) returns (MapReduceStatusResponse);


    // Cluster Status checks.
    rpc ClusterStatus (EmptyMessage) returns (ClusterStatusResponse);
}

// Empty message where there is nothing to be send or replied with.
message EmptyMessage {}

message MapReduceRequest {
    // TODO(voy): Rename/Remove this field once we actually send a library.
    string binary_path = 1;

    // Location of the input data on an accessible filesystem.
    string input_directory = 2;

    // Location of the output directory on an accessible filesystem.
    // Will be automatically generated if it is not included.
    string output_directory = 3;

    // ID of the client. Generated to be used for easier recognising who is
    // making the request. Generated on a single machine for now
    // TODO(voy): Convert to unique identity once we have authentication.
    string client_id = 4;
}

// Response from the master about the map reduce.
message MapReduceResponse {
    string mapreduce_id = 1;
}

message MapReduceStatusRequest {
    // ID of the client. This is used to filter the responses from the master
    // to only show map reduces scheduled by the client itself.
    // THIS IS NOT AUTHENTICATION
    string client_id = 1;

    // Optionally instead of the client_id the specific ID of the map reduce
    // can be given to get its status.
    // TODO(voy): Add restrictions on the type of data that is returned if the
    //            client performing the MapReduce is not the same as the client
    //            requesting the status.
    string mapreduce_id = 2;
}

// Response with the status of the requested map reduce.
message MapReduceStatusResponse {
    repeated MapReduceReport reports = 1;
}

enum Status {
    UNKNOWN = 0;
    DONE = 1;
    IN_PROGRESS = 2;
    IN_QUEUE = 3;
    FAILED = 4;
};

message MapReduceReport {
    string mapreduce_id = 1;
    Status status = 2;
    int64 queue_length = 3;
    // Unix timestamp at which the MapReduce has been scheduled.
    int64 scheduled_timestamp = 4;
    // Unix timestamp at which the MapReduce has been started.
    int64 started_timestamp = 5;
    // Unix timestamp at which the MapReduce has been finished.
    int64 done_timestamp = 6;
    // Location of the output directory
    string output_directory = 7;
    // Details accompanying a failed job.
    string failure_details = 8;
}

message ClusterStatusResponse {
    // Amount of workers in the cluster.
    int64 workers = 1;
    int64 queue_size = 2;
}
